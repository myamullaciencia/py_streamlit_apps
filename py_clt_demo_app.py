# -*- coding: utf-8 -*-
"""py_CLT_demo_app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-X6Me2QT9nUmEaKvcGqfP4pZXa_wQujE
"""

import numpy as np
import pandas as pd
import numpy as np
import time
import streamlit as st
from scipy.stats import geom,binom,norm
import altair as alt

st.set_page_config(
page_title="Central Limit Theoram Demo",
layout="wide",
initial_sidebar_state="expanded")

"""
## Central Limit Theoram for Means
"""
pop_distribution_sel = st.sidebar.selectbox(
    'Please select a population distribution',
     ['Normal','Uniform','Right Skwed','Left Skwed'])

pop_mean = st.sidebar.slider(
    'Mean', min_value=-50, max_value=50,value=0
)

pop_sd = st.sidebar.slider(
    'Standard Deviation', min_value=1, max_value=30,value=1
)

sample_size = st.sidebar.slider(
    'Sample Size', min_value=0, max_value=500,value=10
)

no_of_samples = st.sidebar.slider(
    'Number of samples ', min_value=0, max_value=500,value=5
)

values = st.sidebar.slider('Select a range of values',0, 100, (25, 75),step=1)

population_prop = st.sidebar.slider(
    'Population proportion ', min_value=0.0, max_value=1.0,value=0.5,step=0.1
)

np.random.seed(100)
pop_data = pd.DataFrame(np.random.normal(pop_mean, pop_sd, 5000))


sample_means=[]
for _ in range(no_of_samples):
    sample_means.append(np.mean(pop_data[0].sample(n=sample_size)))

sample_means_df = pd.DataFrame({'sample_mean_x':sample_means})


col1, col2 = st.columns(2)

col1.header("Population Normal Distribution")

pop_hist =alt.Chart(pop_data).mark_bar(
).encode(
    alt.X('0:Q', bin=True),
    alt.Y('count()', stack=None),
).configure_mark(
    color='#756bb1'
)

col1.altair_chart(pop_hist, use_container_width=True)

col2.header("Sampling Distribution")


sample_hist =alt.Chart(sample_means_df).mark_bar(
).encode(
    alt.X('sample_mean_x:Q', bin=True),
    alt.Y('count()', stack=None),
).configure_mark(
    color='#2b8cbe'
)

col2.altair_chart(sample_hist, use_container_width=True)

"""
#### Mean and Standard deviations - Population Vs Sample
"""

sample_mean=sample_means_df['sample_mean_x'].mean()
sample_sd=sample_means_df['sample_mean_x'].std()

pop_sample_stats_df = pd.DataFrame({
    'metric':['Mean','Standard Dev'],
    'Populaton':[pop_mean,pop_sd],
    'Sample':[sample_mean,sample_sd]
})

st.table(pop_sample_stats_df)

col1.header("Population Uniform Distribution")


np.random.seed(100)
uniform_rv = np.random.uniform(values[0],values[1],5000)

pop_uniform_df = pd.DataFrame(uniform_rv)

uni_chart = alt.Chart(pop_uniform_df).mark_bar().encode(
    alt.X('0:Q', bin=True),
    alt.Y('count()', stack=None)).configure_mark(
    color='#edf8b1')

col1.altair_chart(uni_chart, use_container_width=True)


col2.header("Sampling distribution")

sample_means_uniform=[]
for _ in range(no_of_samples):
    sample_means_uniform.append(np.mean(pop_uniform_df[0].sample(n=sample_size)))

sample_means_uniform_df = pd.DataFrame({'sample_mean_x':sample_means_uniform})


sample_hist_uni =alt.Chart(sample_means_uniform_df).mark_bar(
).encode(
    alt.X('sample_mean_x:Q', bin=True),
    alt.Y('count()', stack=None),
).configure_mark(
    color='#fa9fb5'
)

col2.altair_chart(sample_hist_uni, use_container_width=True)

"""
#### Mean and Standard deviations - Population Vs Sample
"""
pop_mean_uni=pop_uniform_df[0].mean()
pop_sd_uni=pop_uniform_df[0].std()

sample_mean_uni=sample_means_uniform_df['sample_mean_x'].mean()
sample_sd_uni=sample_means_uniform_df['sample_mean_x'].std()

pop_sample_stats_uni_df = pd.DataFrame({
    'metric':['Mean','Standard Dev'],
    'Populaton':[pop_mean_uni,pop_sd_uni],
    'Sample':[sample_mean_uni,sample_sd_uni]
})

st.table(pop_sample_stats_uni_df)



"""
## Central Limit Theoram for Proportions
"""

A= round(1000*(1-population_prop)/sample_size,ndigits=1)
B= round(1000*population_prop/sample_size,ndigits=1)

np.random.seed(100)
prop_df = pd.DataFrame({'class':np.random.choice(['B','A'],2,replace=False),
              'prop': [A,B]
              })

st.table(prop_df)
